openapi: 3.0.1
info:
  title: IESI API
  license:
    name: MIT
    url: 'https://github.com/metadew/iesi-doc/blob/master/LICENSE'
  version: 0.6.0
servers:
  - url: 'http://localhost:8080/api'
    description: Generated server url
tags:
  - name: scripts
    description: Everything about scripts
  - name: impersonations
    description: Everything about impersonations
  - name: execution requests
    description: Everything about execution requests
  - name: environments
    description: Everything about environments
  - name: connections
    description: Everything about connections
  - name: components
    description: Everything about components
  - name: action-types
    description: Everything about action types
  - name: connection-types
    description: Everything about connection types
  - name: users
    description: Everything about users
  - name: teams
    description: Everything about teams
  - name: datasets
    description: Everything about datasets
  - name: security_groups
    description: Everthing about security groups
paths:
  /scripts:
    get:
      summary: Fetch all scripts
      tags:
        - scripts
      operationId: scriptsFetchAll
      parameters:
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/Label'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/IncludeInActive'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedScriptDto'
  '/scripts/{name}':
    get:
      summary: All versions of a script with a sepcified name
      tags:
        - scripts
      operationId: scriptsFetchByName
      parameters:
        - $ref: '#/components/parameters/Name-2'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedScriptDto'
  '/scripts/{name}/{version}':
    get:
      summary: Info of a specific script
      tags:
        - scripts
      operationId: scriptsFetchByNameAndVersion
      parameters:
        - $ref: '#/components/parameters/Name-2'
        - $ref: '#/components/parameters/Version-2'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptDto'
        '404':
          description: no script found with specified name and version
  /datasets:
    get:
      summary: Fetch all datasets
      tags:
        - datasets
      operationId: datasetsFetchAll
      parameters:
        - $ref: '#/components/parameters/Name-3'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedDatasetDto'
    post:
      summary: Create a dataset
      tags:
        - datasets
      operationId: datasetsCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetPostDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDto'
        '400':
          description: bad request
  '/datasets/{uuid}':
    get:
      summary: fetch dataset with sepcified uuid
      tags:
        - datasets
      operationId: datasetsFetchById
      parameters:
        - $ref: '#/components/parameters/Uuid'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDto'
        '404':
          description: no dataset found with specified uuid
    put:
      summary: update a dataset
      tags:
        - datasets
      operationId: datasetsUpdateByUuid
      parameters:
        - $ref: '#/components/parameters/Uuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetPutDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDto'
        '400':
          description: bad request
        '404':
          description: specified dataset not found
    delete:
      summary: delete dataset with specified uuid
      tags:
        - datasets
      operationId: datasetsDeleteById
      parameters:
        - $ref: '#/components/parameters/Uuid'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: no dataset found with specified uuid
  '/datasets/{uuid}/implementations':
    get:
      summary: fetch all implementation of a dataset with sepcified uuid
      tags:
        - datasets
      operationId: datasetsFetchImplementationsById
      parameters:
        - $ref: '#/components/parameters/Uuid'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InMemoryDatasetImplementationDtoList'
        '404':
          description: no dataset found with specified uuid
  /users:
    get:
      summary: Fetch all users
      tags:
        - users
      operationId: usersFetchAll
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDtoList'
    post:
      summary: Create a user
      tags:
        - users
      operationId: usersCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPostDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: bad request
  /users/login:
    post:
      summary: Login a user
      tags:
        - users
      operationId: usersLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequestDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponseDto'
        '400':
          description: bad request
  '/users/{uuid}':
    get:
      summary: fetch user with sepcified uuid
      tags:
        - users
      operationId: usersFetchById
      parameters:
        - $ref: '#/components/parameters/Uuid-2'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: no user found with specified uuid
  /teams:
    get:
      summary: Fetch all teams
      tags:
        - teams
      operationId: teamsFetchAll
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDtoList'
    post:
      summary: Create a team
      tags:
        - teams
      operationId: teamsCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamPostDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'
        '400':
          description: bad request
  '/teams/{uuid}':
    get:
      summary: fetch team with sepcified uuid
      tags:
        - teams
      operationId: teamsFetchById
      parameters:
        - $ref: '#/components/parameters/Uuid-3'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'
        '404':
          description: no team found with specified uuid
    put:
      summary: update a team
      tags:
        - teams
      operationId: teamsUpdateByUuid
      parameters:
        - $ref: '#/components/parameters/Uuid-3'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamPutDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'
        '400':
          description: bad request
        '404':
          description: specified team not found
    delete:
      summary: delete team with specified uuid
      tags:
        - teams
      operationId: teamsDeleteById
      parameters:
        - $ref: '#/components/parameters/Uuid-3'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: no team found with specified uuid
  '/teams/{uuid}/roles':
    post:
      summary: Create a role for team
      tags:
        - teams
      operationId: teamsCreateRole
      parameters:
        - $ref: '#/components/parameters/Uuid-3'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolePostDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'
        '400':
          description: bad request
  '/teams/{uuid}/roles/{role-uuid}':
    delete:
      summary: delete a team's role
      tags:
        - teams
      operationId: teamsDeleteRole
      parameters:
        - $ref: '#/components/parameters/Uuid-3'
        - $ref: '#/components/parameters/RoleUuid'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: no team or role found with specified uuid
  '/teams/{uuid}/roles/{role-uuid}/users':
    post:
      summary: Add a user to a team's role
      tags:
        - teams
      operationId: teamsAddUserToRole
      parameters:
        - $ref: '#/components/parameters/Uuid-3'
        - $ref: '#/components/parameters/RoleUuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolePostDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleUserPostDto'
        '400':
          description: bad request
  '/teams/{uuid}/roles/{role-uuid}/users/{user-uuid}':
    delete:
      summary: Delete a user from a team's role
      tags:
        - teams
      operationId: teamsDeleteUserToRole
      parameters:
        - $ref: '#/components/parameters/Uuid-3'
        - $ref: '#/components/parameters/RoleUuid'
        - $ref: '#/components/parameters/UserUuid'
      responses:
        '200':
          description: Expected response to a valid request
        '400':
          description: bad request
  /security-groups:
    get:
      summary: Fetch all security groups
      tags:
        - security_groups
      operationId: securityGroupsFetchAll
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroupDtoList'
    post:
      summary: Create a security group
      tags:
        - security_groups
      operationId: securityGroupsCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupPostDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroupDto'
        '400':
          description: bad request
  '/security-groups/{uuid}':
    get:
      summary: fetch security group with sepcified uuid
      tags:
        - security_groups
      operationId: securityGroupsFetchById
      parameters:
        - $ref: '#/components/parameters/Uuid-4'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroupDto'
        '404':
          description: no team found with specified uuid
    put:
      summary: update a security group
      tags:
        - security_groups
      operationId: securityGRoupsUpdateByUuid
      parameters:
        - $ref: '#/components/parameters/Uuid-4'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupPutDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroupDto'
        '400':
          description: bad request
        '404':
          description: specified security group not found
    delete:
      summary: delete security group with specified uuid
      tags:
        - security_groups
      operationId: securityGroupsDeleteById
      parameters:
        - $ref: '#/components/parameters/Uuid-4'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: no security group found with specified uuid
  '/security-groups/{uuid}/teams':
    post:
      summary: Add a team to the security group
      tags:
        - security_groups
      operationId: securityGroupsAddTeam
      parameters:
        - $ref: '#/components/parameters/Uuid-4'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupTeamPutDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroupDto'
        '404':
          description: no security group found with specified uuid
  '/security-groups/{uuid}/teams/{team-uuid}':
    delete:
      summary: delete a team from a security group
      tags:
        - security_groups
      operationId: securityGroupsAddTeam
      parameters:
        - $ref: '#/components/parameters/Uuid-4'
        - $ref: '#/components/parameters/TeamUuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupTeamPutDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: no security group found with specified uuid
components:
  parameters:
    Version:
      in: query
      name: version
      required: false
      schema:
        type: string
        enum:
          - latest
      description: >-
        allow for selection of only the latest version of all scripts when given
        the value 'latest'
    Name:
      in: query
      name: name
      required: false
      schema:
        type: string
      description: >-
        allow for filtering based on script name. Only scripts containing the
        provided value in its script name will be returned
    Label:
      in: query
      name: label
      required: false
      schema:
        type: string
      description: >-
        allow for filtering based on script label. Format:
        `label_key:label_value`. Only scripts having a label with name
        `label_name` having a value containing `label_value`
    Page:
      in: query
      name: page
      required: false
      schema:
        type: number
        default: 1
      description: determines the page being returned
    Size:
      in: query
      name: size
      required: false
      schema:
        type: number
        default: 20
      description: detemines how many scripts are included in a page
    Sort:
      in: query
      name: sort
      required: false
      schema:
        type: array
        items:
          type: string
          items:
            enum:
              - name
      explode: false
      description: >
        See
        https://stackoverflow.com/questions/33018127/spring-data-rest-sort-by-multiple-properties
        for query parameter formatting. Sort the result set according to the
        provided keywords. The order of sorting follows the order of the list.
        By default sorting is applied in the ascending direction but this can be
        altered by explicitly providing the sorting direction:
         * `name[,desc|,asc]` - Sort by script name.
    Name-2:
      name: name
      description: name of the script
      in: path
      required: true
      schema:
        type: string
    Version-2:
      name: version
      in: path
      required: true
      schema:
        type: integer
        format: int64
    Name-3:
      name: name
      in: query
      required: false
      schema:
        type: string
      description: >-
        allow for filtering based on dataset name. Only dataset containing the
        provided value in its name will be returned
    Uuid:
      name: uuid
      description: uuid of the dataset
      in: path
      required: true
      schema:
        type: string
        format: uuid
    Uuid-2:
      name: uuid
      description: uuid of the user
      in: path
      required: true
      schema:
        type: string
        format: uuid
    Uuid-3:
      name: uuid
      description: uuid of the team
      in: path
      required: true
      schema:
        type: string
        format: uuid
    RoleUuid:
      name: role-uuid
      description: uuid of the team"s role
      in: path
      required: true
      schema:
        type: string
        format: uuid
    UserUuid:
      name: user-uuid
      description: uuid of the user
      in: path
      required: true
      schema:
        type: string
        format: uuid
    Uuid-4:
      name: uuid
      description: uuid of the security group
      in: path
      required: true
      schema:
        type: string
        format: uuid
    TeamUuid:
      name: team-uuid
      description: uuid of the team
      in: path
      required: true
      schema:
        type: string
        format: uuid
    PathScriptsName:
      $ref: '#/components/parameters/Name-2'
    PathScriptsVersion:
      $ref: '#/components/parameters/Version-2'
    QueryScriptsName:
      $ref: '#/components/parameters/Name'
    QueryScriptsVersion:
      $ref: '#/components/parameters/Version'
    QueryScriptsLabel:
      $ref: '#/components/parameters/Label'
    QueryScriptsSort:
      $ref: '#/components/parameters/Sort'
    QueryPaginationPage:
      $ref: '#/components/parameters/Page'
    QueryPaginationSize:
      $ref: '#/components/parameters/Size'
    PathDatasetsUuid:
      $ref: '#/components/parameters/Uuid'
    QueryDatasetsUuid:
      $ref: '#/components/parameters/Name-3'
    PathUsersUuid:
      $ref: '#/components/parameters/Uuid-2'
    PathTeamsUuid:
      $ref: '#/components/parameters/Uuid-3'
    PathTeamsRoleUuid:
      $ref: '#/components/parameters/RoleUuid'
    PathTeamsUserUuid:
      $ref: '#/components/parameters/UserUuid'
    PathSecurityGroupsUuid:
      $ref: '#/components/parameters/Uuid-4'
  schemas:
    ScriptVersionDto:
      $ref: '#/components/schemas/ScriptVersionDto'
    ScriptParameterDto:
      $ref: '#/components/schemas/ScriptParameterDto'
    ActionParameterDto:
      $ref: '#/components/schemas/ActionParameterDto'
    ActionDto:
      $ref: '#/components/schemas/ActionDto'
    ScriptLabelDto:
      $ref: '#/components/schemas/ScriptLabelDto'
    Link:
      $ref: '#/components/schemas/Link'
    ScriptDto:
      $ref: '#/components/schemas/ScriptDto'
    PageLinks:
      $ref: '#/components/schemas/PageLinks'
    PaginationProperties:
      $ref: '#/components/schemas/PaginationProperties'
    PagedScriptDto:
      $ref: '#/components/schemas/PagedScriptDto'
    InMemoryDatasetImplementationKeyValueDto:
      $ref: '#/components/schemas/InMemoryDatasetImplementationKeyValueDto'
    DatasetImplementationLabelDto:
      $ref: '#/components/schemas/DatasetImplementationLabelDto'
    InMemoryDatasetImplementationDto:
      $ref: '#/components/schemas/InMemoryDatasetImplementationDto'
    DatasetDto:
      $ref: '#/components/schemas/DatasetDto'
    PagedDatasetDto:
      $ref: '#/components/schemas/PagedDatasetDto'
    InMemoryDatasetImplementationKeyValuePostDto:
      $ref: '#/components/schemas/InMemoryDatasetImplementationKeyValuePostDto'
    DatasetImplementationLabelPostDto:
      $ref: '#/components/schemas/DatasetImplementationLabelPostDto'
    InMemoryDatasetImplementationPostDto:
      $ref: '#/components/schemas/InMemoryDatasetImplementationPostDto'
    DatasetPostDto:
      $ref: '#/components/schemas/DatasetPostDto'
    DatasetPutDto:
      $ref: '#/components/schemas/DatasetPutDto'
    InMemoryDatasetImplementationDtoList:
      $ref: '#/components/schemas/InMemoryDatasetImplementationDtoList'
    UserRoleTeamDto:
      $ref: '#/components/schemas/UserRoleTeamDto'
    PrivilegeDto:
      $ref: '#/components/schemas/PrivilegeDto'
    UserRoleDto:
      $ref: '#/components/schemas/UserRoleDto'
    UserDto:
      $ref: '#/components/schemas/UserDto'
    UserDtoList:
      $ref: '#/components/schemas/UserDtoList'
    UserPostDto:
      $ref: '#/components/schemas/UserPostDto'
    AuthenticationRequestDto:
      $ref: '#/components/schemas/AuthenticationRequestDto'
    AuthenticationResponseDto:
      $ref: '#/components/schemas/AuthenticationResponseDto'
    TeamSecurityGroupDto:
      $ref: '#/components/schemas/TeamSecurityGroupDto'
    RoleUserDto:
      $ref: '#/components/schemas/RoleUserDto'
    RoleDto:
      $ref: '#/components/schemas/RoleDto'
    TeamDto:
      $ref: '#/components/schemas/TeamDto'
    TeamDtoList:
      $ref: '#/components/schemas/TeamDtoList'
    TeamPostDto:
      $ref: '#/components/schemas/TeamPostDto'
    RolePutDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        users:
          type: array
          items:
            type: string
            format: uuid
        privileges:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeDto'
    TeamPutDto:
      $ref: '#/components/schemas/TeamPutDto'
    PrivilegePostDto:
      $ref: '#/components/schemas/PrivilegePostDto'
    RolePostDto:
      $ref: '#/components/schemas/RolePostDto'
    RoleUserPostDto:
      $ref: '#/components/schemas/RoleUserPostDto'
    SecurityGroupTeamDto:
      $ref: '#/components/schemas/SecurityGroupTeamDto'
    SecurityObjectDto:
      $ref: '#/components/schemas/SecurityObjectDto'
    SecurityGroupDto:
      $ref: '#/components/schemas/SecurityGroupDto'
    SecurityGroupDtoList:
      $ref: '#/components/schemas/SecurityGroupDtoList'
    SecurityGroupPostDto:
      $ref: '#/components/schemas/SecurityGroupPostDto'
    SecurityGroupTeamPutDto:
      $ref: '#/components/schemas/SecurityGroupTeamPutDto'
    SecurityObjectPutDto:
      $ref: '#/components/schemas/SecurityObjectPutDto'
    SecurityGroupPutDto:
      $ref: '#/components/schemas/SecurityGroupPutDto'
    PagedUserDto:
      $ref: '#/components/schemas/PagedUserDto'
    PagedTeamDto:
      $ref: '#/components/schemas/PagedTeamDto'
    Error:
      $ref: '#/components/schemas/Error'
    Error-2:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  responses:
    UnexpectedError:
      $ref: '#/components/responses/UnexpectedError'
    NullResponse:
      $ref: '#/components/responses/NullResponse'
