openapi: 3.0.1
info:
  title: IESI API
  license:
    name: MIT
    url: 'https://github.com/metadew/iesi-doc/blob/master/LICENSE'
  version: 0.6.0
servers:
  - url: 'http://localhost:8080/api'
    description: Generated server url
tags:
  - name: scripts
    description: Everything about scripts
  - name: impersonations
    description: Everything about impersonations
  - name: execution requests
    description: Everything about execution requests
  - name: environments
    description: Everything about environments
  - name: connections
    description: Everything about connections
  - name: components
    description: Everything about components
  - name: action-types
    description: Everything about action types
  - name: connection-types
    description: Everything about connection types
  - name: users
    description: Everything about users
  - name: datasets
    description: Everything about datasets
paths:
  /scripts:
    get:
      summary: Fetch all scripts
      tags:
        - scripts
      operationId: scriptsFetchAll
      parameters:
        - $ref: '#/components/parameters/QueryScriptsVersion'
        - $ref: '#/components/parameters/QueryScriptsName'
        - in: query
          name: label
          required: false
          schema:
            type: string
          description: 'allow for filtering based on script label. Format: `label_key:label_value`. Only scripts having a label with name `label_name` having a value containing `label_value`'
        - $ref: '#/components/parameters/QueryPaginationPage'
        - $ref: '#/components/parameters/QueryPaginationSize'
        - $ref: '#/components/parameters/QueryScriptsSort'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedScriptDto'
  '/scripts/{name}':
    get:
      summary: All versions of a script with a sepcified name
      tags:
        - scripts
      operationId: scriptsFetchByName
      parameters:
        - $ref: '#/components/parameters/PathScriptsName'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedScriptDto'
  '/scripts/{name}/{version}':
    get:
      summary: Info of a specific script
      tags:
        - scripts
      operationId: scriptsFetchByNameAndVersion
      parameters:
        - $ref: '#/components/parameters/PathScriptsName'
        - $ref: '#/components/parameters/PathScriptsVersion'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptDto'
        '404':
          description: no script found with specified name and version
  /datasets:
    get:
      summary: Fetch all datasets
      tags:
        - datasets
      operationId: datasetsFetchAll
      parameters:
        - $ref: '#/components/parameters/QueryDatasetsUuid'
        - $ref: '#/components/parameters/QueryPaginationPage'
        - $ref: '#/components/parameters/QueryPaginationSize'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedDatasetDto'
    post:
      summary: Create a dataset
      tags:
        - datasets
      operationId: datasetsCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetPostDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DatasetDto'
        '400':
          description: bad request
  '/datasets/{uuid}':
    get:
      summary: fetch dataset with sepcified uuid
      tags:
        - datasets
      operationId: datasetsFetchById
      parameters:
        - $ref: '#/components/parameters/PathDatasetsUuid'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDto'
        '404':
          description: no dataset found with specified uuid
    put:
      summary: update a dataset
      tags:
        - datasets
      operationId: datasetsUpdateByUuid
      parameters:
        - $ref: '#/components/parameters/PathDatasetsUuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetPutDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DatasetDto'
        '400':
          description: bad request
        '404':
          description: specified dataset not found
    delete:
      summary: delete dataset with sepcified uuid
      tags:
        - datasets
      operationId: datasetsDeleteById
      parameters:
        - $ref: '#/components/parameters/PathDatasetsUuid'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: no dataset found with specified uuid
components:
  parameters:
    PathScriptsName:
      name: name
      description: name of the script
      in: path
      required: true
      schema:
        type: string
    PathScriptsVersion:
      name: version
      in: path
      required: true
      schema:
        type: integer
        format: int64
    QueryScriptsName:
      in: query
      name: name
      required: false
      schema:
        type: string
      description: allow for filtering based on script name. Only scripts containing the provided value in its script name will be returned
    QueryScriptsVersion:
      in: query
      name: version
      required: false
      schema:
        type: string
        enum:
          - latest
      description: allow for selection of only the latest version of all scripts when given the value 'latest'
    QueryScriptsSort:
      in: query
      name: sort
      required: false
      schema:
        type: array
        items:
          type: string
          items:
            enum:
              - name
      explode: false
      description: |
        See https://stackoverflow.com/questions/33018127/spring-data-rest-sort-by-multiple-properties for query parameter formatting. Sort the result set according to the provided keywords. The order of sorting follows the order of the list. By default sorting is applied in the ascending direction but this can be altered by explicitly providing the sorting direction:
         * `name[,desc|,asc]` - Sort by script name.
    QueryPaginationPage:
      in: query
      name: page
      required: false
      schema:
        type: number
        default: 1
      description: determines the page being returned
    QueryPaginationSize:
      in: query
      name: size
      required: false
      schema:
        type: number
        default: 20
      description: detemines how many scripts are included in a page
    PathDatasetsUuid:
      name: uuid
      description: uuid of the dataset
      in: path
      required: true
      schema:
        type: string
        format: uuid
    QueryDatasetsUuid:
      name: name
      in: query
      required: false
      schema:
        type: string
      description: allow for filtering based on dataset name. Only dataset containing the provided value in its name will be returned
  schemas:
    ScriptDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        version:
          $ref: '#/components/schemas/ScriptVersionDto'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ScriptParameterDto'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/ActionDto'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/ScriptLabelDto'
        execution:
          type: object
          properties:
            total:
              type: number
            mostRecent:
              type: array
              items:
                type: object
                properties:
                  startTimestamp:
                    type: string
                  endTimestamp:
                    type: string
                  runStatus:
                    type: string
                  runId:
                    type: string
                  environment:
                    type: string
        scheduling:
          type: array
          items:
            type: object
            properties:
              environment:
                type: string
              frequency:
                type: number
        _links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/Link'
            scripts:
              $ref: '#/components/schemas/Link'
            AllVersionOfTheScript:
              $ref: '#/components/schemas/Link'
    ScriptVersionDto:
      type: object
      properties:
        number:
          type: integer
          format: int64
        description:
          type: string
    ScriptParameterDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    ScriptLabelDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    ActionDto:
      type: object
      properties:
        number:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
        description:
          type: string
        component:
          type: string
        condition:
          type: string
        iteration:
          type: string
        errorExpected:
          type: boolean
        errorStop:
          type: boolean
        retries:
          type: integer
          format: int32
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ActionParameterDto'
    ActionParameterDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    PagedScriptDto:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            scripts:
              type: array
              items:
                $ref: '#/components/schemas/ScriptDto'
        _links:
          $ref: '#/components/schemas/PageLinks'
        page:
          $ref: '#/components/schemas/PaginationProperties'
    Link:
      type: object
      properties:
        href:
          type: string
    PageLinks:
      type: object
      properties:
        first:
          $ref: '#/components/schemas/Link'
        prev:
          $ref: '#/components/schemas/Link'
        self:
          $ref: '#/components/schemas/Link'
        next:
          $ref: '#/components/schemas/Link'
        last:
          $ref: '#/components/schemas/Link'
    PaginationProperties:
      type: object
      properties:
        size:
          type: integer
          description: Number of element displayed on the page
        totalElements:
          type: integer
          description: Number of element Avalaible in the API through this endpoint
        totalPages:
          type: integer
          description: Number of page with the parameter size and totalElements
        number:
          type: integer
          description: Actual Number of the page (starts from 1 to n)
    DatasetDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        labels:
          type: array
          items:
            $ref: '#/components/schemas/InMemoryDatasetImplementationDto'
    DatasetImplementationLabelDto:
      type: object
      properties:
        uuid:
          type: string
        label:
          type: string
    InMemoryDatasetImplementationDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        keyValues:
          type: array
          items:
            $ref: '#/components/schemas/InMemoryDatasetImplementationKeyValueDto'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/DatasetImplementationLabelDto'
    InMemoryDatasetImplementationKeyValueDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        key:
          type: string
        value:
          type: string
    PagedDatasetDto:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            scripts:
              type: array
              items:
                $ref: '#/components/schemas/DatasetDto'
        _links:
          $ref: '#/components/schemas/PageLinks'
        page:
          $ref: '#/components/schemas/PaginationProperties'
    DatasetPostDto:
      type: object
      properties:
        name:
          type: string
        labels:
          type: array
          items:
            $ref: '#/components/schemas/InMemoryDatasetImplementationPostDto'
    DatasetImplementationLabelPostDto:
      type: object
      properties:
        label:
          type: string
    InMemoryDatasetImplementationPostDto:
      type: object
      properties:
        keyValues:
          type: array
          items:
            $ref: '#/components/schemas/InMemoryDatasetImplementationKeyValuePostDto'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/DatasetImplementationLabelPostDto'
    InMemoryDatasetImplementationKeyValuePostDto:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    DatasetPutDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        labels:
          type: array
          items:
            $ref: '#/components/schemas/InMemoryDatasetImplementationPostDto'
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  responses:
    UnexpectedError:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NullResponse:
      description: Null response
