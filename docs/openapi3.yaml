openapi: 3.0.1
info:
  title: IESI API
  license:
    name: MIT
    url: 'https://github.com/metadew/iesi-doc/blob/master/LICENSE'
  version: 0.6.0
servers:
  - url: 'http://localhost:8080/api'
    description: Generated server url
tags:
  - name: scripts
    description: Everything about scripts
  - name: impersonations
    description: Everything about impersonations
  - name: execution requests
    description: Everything about execution requests
  - name: environments
    description: Everything about environments
  - name: connections
    description: Everything about connections
  - name: components
    description: Everything about components
  - name: action-types
    description: Everything about action types
  - name: connection-types
    description: Everything about connection types
  - name: users
    description: Everything about users
  - name: teams
    description: Everything about teams
  - name: datasets
    description: Everything about datasets
  - name: security_groups
    description: Everthing about security groups
paths:
  /scripts:
    get:
      summary: Fetch all scripts
      tags:
        - scripts
      operationId: scriptsFetchAll
      parameters:
        - $ref: '#/components/parameters/QueryScriptsVersion'
        - $ref: '#/components/parameters/QueryScriptsName'
        - $ref: '#/components/parameters/QueryScriptsLabel'
        - $ref: '#/components/parameters/QueryPaginationPage'
        - $ref: '#/components/parameters/QueryPaginationSize'
        - $ref: '#/components/parameters/QueryScriptsSort'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedScriptDto'
  '/scripts/{name}':
    get:
      summary: All versions of a script with a sepcified name
      tags:
        - scripts
      operationId: scriptsFetchByName
      parameters:
        - $ref: '#/components/parameters/PathScriptsName'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedScriptDto'
  '/scripts/{name}/{version}':
    get:
      summary: Info of a specific script
      tags:
        - scripts
      operationId: scriptsFetchByNameAndVersion
      parameters:
        - $ref: '#/components/parameters/PathScriptsName'
        - $ref: '#/components/parameters/PathScriptsVersion'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptDto'
        '404':
          description: no script found with specified name and version
  /components:
    get:
      summary: Fetch all components
      tags:
        - components
      operationId: componentsFetchAll
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddedComponentDto'
        '403':
          description: Expected response to a forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                example:
                  timestamp: '2021-02-09T07:57:01.062+0000'
                  status: 403
                  error: Forbidden
                  message: Access denied
                  path: /api/components/
    post:
      summary: Post a new component
      tags:
        - components
      operationId: componentsCreate
      requestBody:
        description: Body request that contains the ComponentDto object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentDto'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentDto'
        '403':
          description: Expected response to a forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2021-02-09T07:57:01.062+0000'
                status: 403
                error: Forbidden
                message: Access denied
                path: /api/components/
        '404':
          description: Expected response to an existing component
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2021-02-09T07:57:01.062+0000'
                status: 404
                error: Not Found
                message: Component HttpExecuteRequest already exists
                path: /api/components/
    put:
      summary: Update existing components
      tags:
        - components
      operationId: componentsUpdateAll
      requestBody:
        description: Body request that contains a list of ComponentDto objects
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ComponentDto'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddedComponentDto'
        '403':
          description: Expected response to a forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2021-02-09T07:57:01.062+0000'
                status: 403
                error: Forbidden
                message: Access denied
                path: /api/components/
        '404':
          description: Expected response to one or many un-existing components
    delete:
      summary: Delete all components
      tags:
        - components
      operationId: componentsDeleteAll
      responses:
        '200':
          description: Expected response to a valid request
        '403':
          description: Expected response to a forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                example:
                  timestamp: '2021-02-09T07:57:01.062+0000'
                  status: 403
                  error: Forbidden
                  message: Access denied
                  path: /api/components/
  '/components/{name}':
    get:
      summary: Fetch all versions of a specific component
      tags:
        - components
      operationId: componentsFetchByName
      parameters:
        - name: name
          description: name of the component
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddedComponentDto'
        '403':
          description: Expected response to a forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                example:
                  timestamp: '2021-02-09T07:57:01.062+0000'
                  status: 403
                  error: Forbidden
                  message: Access denied
                  path: /api/components/
    delete:
      summary: Delete a specific component with all versions
      tags:
        - components
      operationId: componentsDeleteByName
      parameters:
        - $ref: '#/paths/~1components~1%7Bname%7D/get/parameters/0'
      responses:
        '200':
          description: Expected response to a valid request
        '403':
          description: Expected response to a forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                example:
                  timestamp: '2021-02-09T07:57:01.062+0000'
                  status: 403
                  error: Forbidden
                  message: Access denied
                  path: /api/components/
  '/components/{name}/{version}':
    get:
      summary: Info of a specific component
      tags:
        - components
      operationId: componentsFetchByNameAndVersion
      parameters:
        - $ref: '#/paths/~1components~1%7Bname%7D/get/parameters/0'
        - name: version
          description: version of the component
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentDto'
        '403':
          description: Expected response to a forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                example:
                  timestamp: '2021-02-09T07:57:01.062+0000'
                  status: 403
                  error: Forbidden
                  message: Access denied
                  path: /api/components/
    put:
      summary: Update component with specific name and version
      tags:
        - components
      operationId: componentsUpdateByNameAndVersion
      parameters:
        - $ref: '#/paths/~1components~1%7Bname%7D/get/parameters/0'
        - $ref: '#/paths/~1components~1%7Bname%7D~1%7Bversion%7D/get/parameters/1'
      requestBody:
        $ref: '#/paths/~1components/post/requestBody'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddedComponentDto'
        '400':
          description: Expected response to a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2021-02-09T08:58:31.073+0000'
                status: 400
                error: Bad Request
                message: 'Mismatch between url query ''HttpExecuteRequestss'' and request body '
                path: /api/components/HttpExecuteRequestss/1
        '403':
          description: Expected response to a forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2021-02-09T07:57:01.062+0000'
                status: 403
                error: Forbidden
                message: Access denied
                path: /api/components/
        '404':
          description: Expected response to a un-existing component
    delete:
      summary: Delete a specific version of a component
      tags:
        - components
      operationId: componentsDeleteByName
      parameters:
        - $ref: '#/paths/~1components~1%7Bname%7D/get/parameters/0'
        - $ref: '#/paths/~1components~1%7Bname%7D~1%7Bversion%7D/get/parameters/1'
      responses:
        '200':
          description: Expected response to a valid request
        '403':
          description: Expected response to a forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                example:
                  timestamp: '2021-02-09T07:57:01.062+0000'
                  status: 403
                  error: Forbidden
                  message: Access denied
                  path: /api/components/
        '404':
          description: Expected response to a un-existing version of a component
  /datasets:
    get:
      summary: Fetch all datasets
      tags:
        - datasets
      operationId: datasetsFetchAll
      parameters:
        - $ref: '#/components/parameters/QueryDatasetsUuid'
        - $ref: '#/components/parameters/QueryPaginationPage'
        - $ref: '#/components/parameters/QueryPaginationSize'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedDatasetDto'
    post:
      summary: Create a dataset
      tags:
        - datasets
      operationId: datasetsCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetPostDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDto'
        '400':
          description: bad request
  '/datasets/{uuid}':
    get:
      summary: fetch dataset with sepcified uuid
      tags:
        - datasets
      operationId: datasetsFetchById
      parameters:
        - $ref: '#/components/parameters/PathDatasetsUuid'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDto'
        '404':
          description: no dataset found with specified uuid
    put:
      summary: update a dataset
      tags:
        - datasets
      operationId: datasetsUpdateByUuid
      parameters:
        - $ref: '#/components/parameters/PathDatasetsUuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetPutDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDto'
        '400':
          description: bad request
        '404':
          description: specified dataset not found
    delete:
      summary: delete dataset with specified uuid
      tags:
        - datasets
      operationId: datasetsDeleteById
      parameters:
        - $ref: '#/components/parameters/PathDatasetsUuid'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: no dataset found with specified uuid
  '/datasets/{uuid}/implementations':
    get:
      summary: fetch all implementation of a dataset with sepcified uuid
      tags:
        - datasets
      operationId: datasetsFetchImplementationsById
      parameters:
        - $ref: '#/components/parameters/PathDatasetsUuid'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InMemoryDatasetImplementationDtoList'
        '404':
          description: no dataset found with specified uuid
  /users:
    get:
      summary: Fetch all users
      tags:
        - users
      operationId: usersFetchAll
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDtoList'
    post:
      summary: Create a user
      tags:
        - users
      operationId: usersCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPostDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: bad request
  /users/login:
    post:
      summary: Login a user
      tags:
        - users
      operationId: usersLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequestDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponseDto'
        '400':
          description: bad request
  '/users/{uuid}':
    get:
      summary: fetch user with sepcified uuid
      tags:
        - users
      operationId: usersFetchById
      parameters:
        - $ref: '#/components/parameters/PathUsersUuid'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: no user found with specified uuid
  /teams:
    get:
      summary: Fetch all teams
      tags:
        - teams
      operationId: teamsFetchAll
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDtoList'
    post:
      summary: Create a team
      tags:
        - teams
      operationId: teamsCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamPostDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'
        '400':
          description: bad request
  '/teams/{uuid}':
    get:
      summary: fetch team with sepcified uuid
      tags:
        - teams
      operationId: teamsFetchById
      parameters:
        - $ref: '#/components/parameters/PathTeamsUuid'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'
        '404':
          description: no team found with specified uuid
    put:
      summary: update a team
      tags:
        - teams
      operationId: teamsUpdateByUuid
      parameters:
        - $ref: '#/components/parameters/PathTeamsUuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamPutDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'
        '400':
          description: bad request
        '404':
          description: specified team not found
    delete:
      summary: delete team with specified uuid
      tags:
        - teams
      operationId: teamsDeleteById
      parameters:
        - $ref: '#/components/parameters/PathTeamsUuid'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: no team found with specified uuid
  '/teams/{uuid}/roles':
    post:
      summary: Create a role for team
      tags:
        - teams
      operationId: teamsCreateRole
      parameters:
        - $ref: '#/components/parameters/PathTeamsUuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolePostDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'
        '400':
          description: bad request
  '/teams/{uuid}/roles/{role-uuid}':
    delete:
      summary: delete a team's role
      tags:
        - teams
      operationId: teamsDeleteRole
      parameters:
        - $ref: '#/components/parameters/PathTeamsUuid'
        - $ref: '#/components/parameters/PathTeamsRoleUuid'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: no team or role found with specified uuid
  '/teams/{uuid}/roles/{role-uuid}/users':
    post:
      summary: Add a user to a team's role
      tags:
        - teams
      operationId: teamsAddUserToRole
      parameters:
        - $ref: '#/components/parameters/PathTeamsUuid'
        - $ref: '#/components/parameters/PathTeamsRoleUuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolePostDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleUserPostDto'
        '400':
          description: bad request
  '/teams/{uuid}/roles/{role-uuid}/users/{user-uuid}':
    delete:
      summary: Delete a user from a team's role
      tags:
        - teams
      operationId: teamsDeleteUserToRole
      parameters:
        - $ref: '#/components/parameters/PathTeamsUuid'
        - $ref: '#/components/parameters/PathTeamsRoleUuid'
        - $ref: '#/components/parameters/PathTeamsUserUuid'
      responses:
        '200':
          description: Expected response to a valid request
        '400':
          description: bad request
  /security-groups:
    get:
      summary: Fetch all security groups
      tags:
        - security_groups
      operationId: securityGroupsFetchAll
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroupDtoList'
    post:
      summary: Create a security group
      tags:
        - security_groups
      operationId: securityGroupsCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupPostDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroupDto'
        '400':
          description: bad request
  '/security-groups/{uuid}':
    get:
      summary: fetch security group with sepcified uuid
      tags:
        - security_groups
      operationId: securityGroupsFetchById
      parameters:
        - $ref: '#/components/parameters/PathSecurityGroupsUuid'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroupDto'
        '404':
          description: no team found with specified uuid
    put:
      summary: update a security group
      tags:
        - security_groups
      operationId: securityGRoupsUpdateByUuid
      parameters:
        - $ref: '#/components/parameters/PathSecurityGroupsUuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupPutDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroupDto'
        '400':
          description: bad request
        '404':
          description: specified security group not found
    delete:
      summary: delete security group with specified uuid
      tags:
        - security_groups
      operationId: securityGroupsDeleteById
      parameters:
        - $ref: '#/components/parameters/PathSecurityGroupsUuid'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: no security group found with specified uuid
  '/security-groups/{uuid}/teams':
    post:
      summary: Add a team to the security group
      tags:
        - security_groups
      operationId: securityGroupsAddTeam
      parameters:
        - $ref: '#/components/parameters/PathSecurityGroupsUuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupTeamPutDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroupDto'
        '404':
          description: no security group found with specified uuid
  '/security-groups/{uuid}/teams/{team-uuid}':
    delete:
      summary: delete a team from a security group
      tags:
        - security_groups
      operationId: securityGroupsAddTeam
      parameters:
        - $ref: '#/components/parameters/PathSecurityGroupsUuid'
        - name: team-uuid
          description: uuid of the team
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupTeamPutDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: no security group found with specified uuid
components:
  parameters:
    PathScriptsName:
      name: name
      description: name of the script
      in: path
      required: true
      schema:
        type: string
    PathScriptsVersion:
      name: version
      description: version of the script
      in: path
      required: true
      schema:
        type: integer
        format: int64
    QueryScriptsName:
      in: query
      name: name
      required: false
      schema:
        type: string
      description: allow for filtering based on script name. Only scripts containing the provided value in its script name will be returned
    QueryScriptsVersion:
      in: query
      name: version
      required: false
      schema:
        type: string
        enum:
          - latest
      description: allow for selection of only the latest version of all scripts when given the value 'latest'
    QueryScriptsLabel:
      in: query
      name: label
      required: false
      schema:
        type: string
      description: 'allow for filtering based on script label. Format: `label_key:label_value`. Only scripts having a label with name `label_name` having a value containing `label_value`'
    QueryScriptsSort:
      in: query
      name: sort
      required: false
      schema:
        type: array
        items:
          type: string
          items:
            enum:
              - name
      explode: false
      description: |
        See https://stackoverflow.com/questions/33018127/spring-data-rest-sort-by-multiple-properties for query parameter formatting. Sort the result set according to the provided keywords. The order of sorting follows the order of the list. By default sorting is applied in the ascending direction but this can be altered by explicitly providing the sorting direction:
         * `name[,desc|,asc]` - Sort by script name.
    QueryPaginationPage:
      in: query
      name: page
      required: false
      schema:
        type: number
        default: 1
      description: determines the page being returned
    QueryPaginationSize:
      in: query
      name: size
      required: false
      schema:
        type: number
        default: 20
      description: detemines how many scripts are included in a page
    PathDatasetsUuid:
      name: uuid
      description: uuid of the dataset
      in: path
      required: true
      schema:
        type: string
        format: uuid
    QueryDatasetsUuid:
      name: name
      in: query
      required: false
      schema:
        type: string
      description: allow for filtering based on dataset name. Only dataset containing the provided value in its name will be returned
    PathUsersUuid:
      name: uuid
      description: uuid of the user
      in: path
      required: true
      schema:
        type: string
        format: uuid
    PathTeamsUuid:
      name: uuid
      description: uuid of the team
      in: path
      required: true
      schema:
        type: string
        format: uuid
    PathTeamsRoleUuid:
      name: role-uuid
      description: uuid of the team"s role
      in: path
      required: true
      schema:
        type: string
        format: uuid
    PathTeamsUserUuid:
      name: user-uuid
      description: uuid of the user
      in: path
      required: true
      schema:
        type: string
        format: uuid
    PathSecurityGroupsUuid:
      name: uuid
      description: uuid of the security group
      in: path
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    ScriptDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        version:
          $ref: '#/components/schemas/ScriptVersionDto'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ScriptParameterDto'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/ActionDto'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/ScriptLabelDto'
        execution:
          type: object
          properties:
            total:
              type: number
            mostRecent:
              type: array
              items:
                type: object
                properties:
                  startTimestamp:
                    type: string
                  endTimestamp:
                    type: string
                  runStatus:
                    type: string
                  runId:
                    type: string
                  environment:
                    type: string
        scheduling:
          type: array
          items:
            type: object
            properties:
              environment:
                type: string
              frequency:
                type: number
        _links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/Link'
            scripts:
              $ref: '#/components/schemas/Link'
            AllVersionOfTheScript:
              $ref: '#/components/schemas/Link'
    ScriptVersionDto:
      type: object
      properties:
        number:
          type: integer
          format: int64
        description:
          type: string
    ScriptParameterDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    ScriptLabelDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    ActionDto:
      type: object
      properties:
        number:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
        description:
          type: string
        component:
          type: string
        condition:
          type: string
        iteration:
          type: string
        errorExpected:
          type: boolean
        errorStop:
          type: boolean
        retries:
          type: integer
          format: int32
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ActionParameterDto'
    ActionParameterDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    PagedScriptDto:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            scripts:
              type: array
              items:
                $ref: '#/components/schemas/ScriptDto'
        _links:
          $ref: '#/components/schemas/PageLinks'
        page:
          $ref: '#/components/schemas/PaginationProperties'
    ComponentDto:
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        description:
          type: string
        version:
          $ref: '#/components/schemas/ComponentVersionDto'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ComponentParameterDto'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/ComponentAttributeDto'
    ComponentVersionDto:
      type: object
      properties:
        number:
          type: integer
          format: int64
        description:
          type: string
    ComponentParameterDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    ComponentAttributeDto:
      type: object
      properties:
        environment:
          type: string
        name:
          type: string
        value:
          type: string
    EmbeddedComponentDto:
      type: object
      properties:
        embedded:
          type: array
          items:
            $ref: '#/components/schemas/ComponentDto'
    Link:
      type: object
      properties:
        href:
          type: string
    PageLinks:
      type: object
      properties:
        first:
          $ref: '#/components/schemas/Link'
        prev:
          $ref: '#/components/schemas/Link'
        self:
          $ref: '#/components/schemas/Link'
        next:
          $ref: '#/components/schemas/Link'
        last:
          $ref: '#/components/schemas/Link'
    PaginationProperties:
      type: object
      properties:
        size:
          type: integer
          description: Number of element displayed on the page
        totalElements:
          type: integer
          description: Number of element Avalaible in the API through this endpoint
        totalPages:
          type: integer
          description: Number of page with the parameter size and totalElements
        number:
          type: integer
          description: Actual Number of the page (starts from 1 to n)
    DatasetDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        implementations:
          type: array
          items:
            $ref: '#/components/schemas/InMemoryDatasetImplementationDto'
    DatasetImplementationLabelDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        label:
          type: string
    InMemoryDatasetImplementationDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - in_memory
        keyValues:
          type: array
          items:
            $ref: '#/components/schemas/InMemoryDatasetImplementationKeyValueDto'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/DatasetImplementationLabelDto'
    InMemoryDatasetImplementationDtoList:
      type: array
      items:
        $ref: '#/components/schemas/InMemoryDatasetImplementationDto'
    InMemoryDatasetImplementationKeyValueDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        key:
          type: string
        value:
          type: string
    PagedDatasetDto:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            datasets:
              type: array
              items:
                $ref: '#/components/schemas/DatasetDto'
        _links:
          $ref: '#/components/schemas/PageLinks'
        page:
          $ref: '#/components/schemas/PaginationProperties'
    DatasetPostDto:
      type: object
      properties:
        name:
          type: string
        implementations:
          type: array
          items:
            $ref: '#/components/schemas/InMemoryDatasetImplementationPostDto'
    DatasetImplementationLabelPostDto:
      type: object
      properties:
        label:
          type: string
    InMemoryDatasetImplementationPostDto:
      type: object
      properties:
        keyValues:
          type: array
          items:
            $ref: '#/components/schemas/InMemoryDatasetImplementationKeyValuePostDto'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/DatasetImplementationLabelPostDto'
        type:
          type: string
          enum:
            - in_memory
    InMemoryDatasetImplementationKeyValuePostDto:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    DatasetPutDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        implementations:
          type: array
          items:
            $ref: '#/components/schemas/InMemoryDatasetImplementationPostDto'
    UserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        enabled:
          type: boolean
        expired:
          type: boolean
        credentialsExpired:
          type: boolean
        locked:
          type: boolean
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRoleDto'
    UserPostDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    UserRoleDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        team:
          $ref: '#/components/schemas/UserRoleTeamDto'
        privileges:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeDto'
    UserRoleTeamDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    PagedUserDto:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/UserDto'
        _links:
          $ref: '#/components/schemas/PageLinks'
        page:
          $ref: '#/components/schemas/PaginationProperties'
    AuthenticationResponseDto:
      type: object
      properties:
        accessToken:
          type: string
        expiresIn:
          type: integer
    AuthenticationRequestDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    UserDtoList:
      type: array
      items:
        $ref: '#/components/schemas/UserDto'
    PrivilegeDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        privilege:
          type: string
    PrivilegePostDto:
      type: object
      properties:
        privilege:
          type: string
    TeamDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        teamName:
          type: string
        securityGroups:
          type: array
          items:
            $ref: '#/components/schemas/TeamSecurityGroupDto'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleDto'
    RoleDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/RoleUserDto'
        privileges:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeDto'
    RolePostDto:
      type: object
      properties:
        name:
          type: string
        privileges:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegePostDto'
    RoleUserPostDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
    TeamPostDto:
      type: object
      properties:
        teamName:
          type: string
    TeamPutDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        teamName:
          type: string
        securityGroups:
          type: array
          items:
            type: string
            format: uuid
        roles:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              name:
                type: string
              users:
                type: array
                items:
                  type: string
                  format: uuid
              privileges:
                type: array
                items:
                  $ref: '#/components/schemas/PrivilegeDto'
    TeamDtoList:
      type: array
      items:
        $ref: '#/components/schemas/TeamDto'
    PagedTeamDto:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            teams:
              type: array
              items:
                $ref: '#/components/schemas/TeamDto'
        _links:
          $ref: '#/components/schemas/PageLinks'
        page:
          $ref: '#/components/schemas/PaginationProperties'
    RoleUserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        enabled:
          type: boolean
        expired:
          type: boolean
        credentialsExpired:
          type: boolean
        locked:
          type: boolean
    TeamSecurityGroupDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    SecurityObjectDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        type:
          type: string
    SecurityObjectPutDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
    SecurityGroupDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        teams:
          type: array
          items:
            $ref: '#/components/schemas/SecurityGroupTeamDto'
        securityObjects:
          type: array
          items:
            $ref: '#/components/schemas/SecurityObjectDto'
    SecurityGroupPostDto:
      type: object
      properties:
        name:
          type: string
    SecurityGroupPutDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        teams:
          type: array
          items:
            $ref: '#/components/schemas/SecurityGroupTeamPutDto'
        securityObjects:
          type: array
          items:
            $ref: '#/components/schemas/SecurityObjectPutDto'
    SecurityGroupTeamDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        teamName:
          type: string
    SecurityGroupTeamPutDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
    SecurityGroupDtoList:
      type: array
      items:
        $ref: '#/components/schemas/SecurityGroupDto'
    Response:
      type: object
      properties:
        timestamp:
          type: string
        status:
          type: integer
        message:
          type: string
    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            error:
              type: string
            path:
              type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  responses:
    UnexpectedError:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NullResponse:
      description: Null response
