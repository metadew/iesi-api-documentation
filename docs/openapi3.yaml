openapi: 3.0.1
info:
  title: IESI API
  license:
    name: MIT
    url: 'https://github.com/metadew/iesi-doc/blob/master/LICENSE'
  version: 0.6.0
servers:
  - url: 'http://localhost:8080/api'
    description: Generated server url
tags:
  - name: scripts
    description: Everything about scripts
  - name: impersonations
    description: Everything about impersonations
  - name: execution requests
    description: Everything about execution requests
  - name: environments
    description: Everything about environments
  - name: connections
    description: Everything about connections
  - name: components
    description: Everything about components
  - name: action-types
    description: Everything about action types
  - name: connection-types
    description: Everything about connection types
  - name: component-types
    description: Everything about component types
  - name: users
    description: Everything about users
  - name: teams
    description: Everything about teams
  - name: datasets
    description: Everything about datasets
  - name: security_groups
    description: Everthing about security groups
paths:
  /scripts:
    get:
      summary: Fetch all scripts
      tags:
        - scripts
      operationId: scriptsFetchAll
      security:
        - bearerAuth:
            - SCRIPT_READ
      parameters:
        - $ref: '#/components/parameters/QueryScriptsVersion'
        - $ref: '#/components/parameters/QueryScriptsName'
        - $ref: '#/components/parameters/QueryScriptsLabel'
        - $ref: '#/components/parameters/QueryPaginationPage'
        - $ref: '#/components/parameters/QueryPaginationSize'
        - $ref: '#/components/parameters/QueryScriptsSort'
        - $ref: '#/components/parameters/QueryScriptIncludeInActive'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedScriptDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          description: Expected response to a forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2021-02-09T07:57:01.062+0000'
                status: 403
                error: Forbidden
                message: Access denied
                path: /api/scripts/
    post:
      summary: Create a new script
      tags:
        - scripts
      operationId: scriptsCreate
      security:
        - bearerAuth:
            - SCRIPT_WRITE
      requestBody:
        description: The new Script to be created
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                securityGroupName:
                  type: string
                description:
                  type: string
                version:
                  $ref: '#/components/schemas/ScriptVersionDto'
                parameters:
                  type: array
                  items:
                    $ref: '#/components/schemas/ScriptParameterDto'
                actions:
                  type: array
                  items:
                    $ref: '#/components/schemas/ActionDto'
                labels:
                  type: array
                  items:
                    $ref: '#/components/schemas/ScriptLabelDto'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedScriptDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/paths/~1scripts/get/responses/403'
    put:
      summary: Update one or multiple scripts
      tags:
        - scripts
      operationId: scriptsUpdate
      security:
        - bearerAuth:
            - SCRIPT_WRITE
      requestBody:
        description: list of Scripts to be updated. Each element of the list contains the new implementation of the Script
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/paths/~1scripts/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/paths/~1scripts/get/responses/403'
  '/scripts/{name}':
    get:
      summary: All versions of a script with a specified name
      tags:
        - scripts
      operationId: scriptsFetchByName
      security:
        - bearerAuth:
            - SCRIPT_READ
      parameters:
        - $ref: '#/components/parameters/PathScriptsName'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedScriptDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/paths/~1scripts/get/responses/403'
  '/scripts/{name}/{version}':
    get:
      summary: Info of a specific script
      tags:
        - scripts
      operationId: scriptsFetchByNameAndVersion
      security:
        - bearerAuth:
            - SCRIPT_READ
      parameters:
        - $ref: '#/components/parameters/PathScriptsName'
        - $ref: '#/components/parameters/PathScriptsVersion'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/paths/~1scripts/get/responses/403'
        '404':
          description: no script found with specified name and version
    put:
      summary: Update a specific script
      tags:
        - scripts
      operationId: scriptsUpdateByNameAndVersion
      security:
        - bearerAuth:
            - SCRIPT_WRITE
      parameters:
        - $ref: '#/components/parameters/PathScriptsName'
        - $ref: '#/components/parameters/PathScriptsVersion'
      requestBody:
        description: New implementation of the script
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1scripts/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptDto'
        '400':
          description: Expected response to a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2021-02-09T13:50:52.083+0000'
                status: 400
                error: Bad Request
                message: Mismatch between url query '989' and request body
                path: /api/scripts/fho.folderExists.2/989
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/paths/~1scripts/get/responses/403'
    delete:
      summary: Delete a specific script
      tags:
        - scripts
      operationId: scriptsDeleteByNameAndVersion
      security:
        - bearerAuth:
            - SCRIPT_WRITE
      parameters:
        - $ref: '#/components/parameters/PathScriptsName'
        - $ref: '#/components/parameters/PathScriptsVersion'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - ok
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/paths/~1scripts/get/responses/403'
        '404':
          description: Expected response to a unexisting resource
  /components:
    get:
      summary: Fetch all components
      tags:
        - components
      operationId: componentsFetchAll
      security:
        - bearerAuth:
            - COMPONENTS_READ
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddedComponentDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseComponentForbidden'
    post:
      summary: Create a new component
      tags:
        - components
      operationId: componentsCreate
      security:
        - bearerAuth:
            - COMPONENTS_WRITE
      requestBody:
        description: The new Component to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentDto'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseComponentForbidden'
        '404':
          description: Expected response to a non-existing component
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2021-02-09T07:57:01.062+0000'
                status: 404
                error: Not Found
                message: Component HttpExecuteRequest already exists
                path: /api/components/
    put:
      summary: Update existing components
      tags:
        - components
      operationId: componentsUpdateAll
      security:
        - bearerAuth:
            - COMPONENTS_WRITE
      requestBody:
        description: list of components to be updated. Each element of the list contains the new implementation of the component
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ComponentDto'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddedComponentDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseComponentForbidden'
        '404':
          description: Expected response to one or many non-existing components
    delete:
      summary: Delete all components
      tags:
        - components
      operationId: componentsDeleteAll
      security:
        - bearerAuth:
            - COMPONENTS_WRITE
      responses:
        '200':
          description: Expected response to a valid request
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseComponentForbidden'
  '/components/{name}':
    get:
      summary: Fetch all versions of a specific component
      tags:
        - components
      operationId: componentsFetchByName
      security:
        - bearerAuth:
            - COMPONENTS_READ
      parameters:
        - $ref: '#/components/parameters/PathComponentName'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddedComponentDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseComponentForbidden'
    delete:
      summary: Delete a specific component with all versions
      tags:
        - components
      operationId: componentsDeleteByName
      security:
        - bearerAuth:
            - COMPONENTS_WRITE
      parameters:
        - $ref: '#/components/parameters/PathComponentName'
      responses:
        '200':
          description: Expected response to a valid request
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseComponentForbidden'
  '/components/{name}/{version}':
    get:
      summary: Fetch a component by name and version
      tags:
        - components
      operationId: componentsFetchByNameAndVersion
      security:
        - bearerAuth:
            - COMPONENTS_READ
      parameters:
        - $ref: '#/components/parameters/PathComponentName'
        - $ref: '#/components/parameters/PathComponentVersion'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseComponentForbidden'
    put:
      summary: Update component with specific name and version
      tags:
        - components
      operationId: componentsUpdateByNameAndVersion
      security:
        - bearerAuth:
            - COMPONENTS_WRITE
      parameters:
        - $ref: '#/components/parameters/PathComponentName'
        - $ref: '#/components/parameters/PathComponentVersion'
      requestBody:
        description: New implementation of the component
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentDto'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddedComponentDto'
        '400':
          description: Expected response to a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2021-02-09T08:58:31.073+0000'
                status: 400
                error: Bad Request
                message: 'Mismatch between url query ''HttpExecuteRequestss'' and request body '
                path: /api/components/HttpExecuteRequestss/1
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseComponentForbidden'
        '404':
          description: Expected response to a un-existing component
    delete:
      summary: Delete a specific version of a component
      tags:
        - components
      operationId: componentsDeleteByNameAndVersion
      security:
        - bearerAuth:
            - COMPONENTS_WRITE
      parameters:
        - $ref: '#/components/parameters/PathComponentName'
        - $ref: '#/components/parameters/PathComponentVersion'
      responses:
        '200':
          description: Expected response to a valid request
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseComponentForbidden'
        '404':
          description: Expected response to a un-existing version of a component
  /connections:
    get:
      summary: Fetch all connections
      tags:
        - connections
      operationId: connectionsFetchAll
      security:
        - bearerAuth:
            - CONNECTIONS_READ
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddedConnectionDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseConnectionForbidden'
    post:
      summary: Create a new connection
      tags:
        - connections
      operationId: connectionsCreate
      security:
        - bearerAuth:
            - CONNECTIONS_WRITE
      requestBody:
        description: The new Connection to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionDto'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseConnectionForbidden'
        '404':
          description: Expected response to an existing connnection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2021-02-09T07:57:01.062+0000'
                status: 404
                error: Not Found
                message: Connection db.company.a already exists
                path: /api/connections/
    put:
      summary: update group of connections
      tags:
        - connections
      operationId: connectionsUpdateAll
      security:
        - bearerAuth:
            - CONNECTIONS_WRITE
      requestBody:
        description: list of Connections to be updated. Each element of the list contains the new implementation of the connection
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ConnectionDto'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddedConnectionDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseConnectionForbidden'
        '404':
          description: Expected response to one or many un-existing connections
    delete:
      summary: Delete all connections
      tags:
        - connections
      operationId: connectionsDeleteAll
      security:
        - bearerAuth:
            - CONNECTIONS_WRITE
      responses:
        '200':
          description: Expected response to a valid request
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseConnectionForbidden'
  '/connections/{name}':
    get:
      summary: Info of a specific connection
      tags:
        - connections
      operationId: connectionsFetchByName
      security:
        - bearerAuth:
            - CONNECTIONS_READ
      parameters:
        - $ref: '#/components/parameters/PathConnectionName'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseConnectionForbidden'
    delete:
      summary: Delete a connection with specific name
      tags:
        - connections
      operationId: connectionsDeleteByName
      security:
        - bearerAuth:
            - CONNECTIONS_WRITE
      parameters:
        - $ref: '#/components/parameters/PathConnectionName'
      responses:
        '200':
          description: Expected response to a valid request
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseConnectionForbidden'
        '404':
          description: Expected response to a non-existing connection
    put:
      summary: Update connection with specific name
      tags:
        - connections
      operationId: connectionsUpdateByName
      security:
        - bearerAuth:
            - CONNECTIONS_WRITE
      parameters:
        - $ref: '#/components/parameters/PathConnectionName'
      requestBody:
        description: New implementation of the connection
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionDto'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionDto'
        '400':
          description: Expected response to a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2021-02-09T11:50:59.412+0000'
                status: 400
                error: Bad Request
                message: 'Mismatch between url query ''db.company.za'' and request body '
                path: /api/connections/db.company.za/qsdqsdqsd
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseConnectionForbidden'
        '404':
          description: Expected response to one or many un-existing connections
  /component-types:
    get:
      summary: Fetch all component types
      tags:
        - component-types
      operationId: componentTypesFetchAll
      responses:
        '200':
          description: Returns all component types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/componentTypeDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseComponentForbidden'
  '/component-types/{name}':
    get:
      summary: Fetch component type by name
      tags:
        - component-types
      operationId: componentTypesFetchByName
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a component type regarding to the name passed in the path
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/componentTypeDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseComponentForbidden'
  /environments:
    get:
      summary: Fetch all environments
      tags:
        - environments
      operationId: environmentsFetchAll
      security:
        - bearerAuth:
            - ENVIRONMENTS_READ
      parameters:
        - $ref: '#/components/parameters/QueryPaginationPage'
        - $ref: '#/components/parameters/QueryPaginationSize'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddedEnvironmentDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseEnvironmentForbidden'
    post:
      summary: Create a new environment
      tags:
        - environments
      operationId: environmentsCreate
      security:
        - bearerAuth:
            - ENVIRONMENTS_WRITE
      requestBody:
        description: The new Environment to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentDto'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseEnvironmentForbidden'
        '404':
          description: Expected response to an existing environment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2021-02-09T07:57:01.062+0000'
                status: 404
                error: Not Found
                message: environment TUTORIAL already exists
                path: /api/environments/
    put:
      summary: Update existing environments
      tags:
        - environments
      operationId: environmentsUpdateAll
      security:
        - bearerAuth:
            - ENVIRONMENTS_WRITE
      requestBody:
        description: list of Environments to be updated. Each element of the list contains the new implementation of the environment
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/EnvironmentDto'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddedEnvironmentDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseEnvironmentForbidden'
        '404':
          description: Expected response to one or many un-existing environments
    delete:
      summary: Delete all environments
      tags:
        - environments
      operationId: environmentsDeleteAll
      security:
        - bearerAuth:
            - ENVIRONMENTS_WRITE
      responses:
        '200':
          description: Expected response to a valid request
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseEnvironmentForbidden'
  /environments/list:
    get:
      summary: Fetch all environments List
      tags:
        - environments
      operationId: environmentsFetchAllList
      security:
        - bearerAuth:
            - ENVIRONMENTS_READ
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  _embedded:
                    type: array
                    items:
                      $ref: '#/components/schemas/EnvironmentDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          description: Expected response to a forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2021-02-09T07:57:01.062+0000'
                status: 403
                error: Forbidden
                message: Access denied
                path: /api/environments/list
  '/environments/{name}':
    get:
      summary: Fetch a specific environment
      tags:
        - environments
      operationId: environmentsFetchByName
      security:
        - bearerAuth:
            - ENVIRONMENTS_READ
      parameters:
        - $ref: '#/components/parameters/PathEnvironmentName'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseEnvironmentForbidden'
        '404':
          description: Expected response to a non-existing environment
    put:
      summary: Update a specific environment
      tags:
        - environments
      operationId: environmentsUpdateByName
      security:
        - bearerAuth:
            - ENVIRONMENTS_WRITE
      parameters:
        - $ref: '#/components/parameters/PathEnvironmentName'
      requestBody:
        description: New implementation of of the environment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentDto'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentDto'
        '400':
          description: Expected response to a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2021-02-09T14:44:32.933+000'
                status: 400
                error: Bad Request
                message: Mismatch between url query 'TUTO' and request body
                path: /api/environments/TUTO
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseEnvironmentForbidden'
        '404':
          description: Expected response to a non-existing environment
    delete:
      summary: Delete a specific environment
      tags:
        - environments
      operationId: environmentsDeleteByName
      security:
        - bearerAuth:
            - ENVIRONMENTS_WRITE
      parameters:
        - $ref: '#/components/parameters/PathEnvironmentName'
      responses:
        '200':
          description: Expected response to a valid request
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseEnvironmentForbidden'
        '404':
          description: Expected response to a un-existing environment
  '/environments/{name}/connections':
    get:
      summary: Fetch all connections related to the specific environment
      tags:
        - environments
      operationId: environmentsFetchConnectionsByName
      security:
        - bearerAuth:
            - ENVIRONMENTS_READ
      parameters:
        - $ref: '#/components/parameters/PathEnvironmentName'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddedConnectionDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseEnvironmentForbidden'
        '404':
          description: Expected response to a non-existing environment
  /execution-requests:
    get:
      summary: Fetch all execution requests
      tags:
        - execution requests
      operationId: executionRequestsFetchAll
      security:
        - bearerAuth:
            - EXECUTION_REQUESTS_READ
      parameters:
        - $ref: '#/components/parameters/QueryExecutionRequestScript'
        - $ref: '#/components/parameters/QueryExecutionRequestVersion'
        - $ref: '#/components/parameters/QueryExecutionRequestLabel'
        - $ref: '#/components/parameters/QueryExecutionRequestEnvironment'
        - $ref: '#/components/parameters/QueryExecutionRequestRunId'
        - $ref: '#/components/parameters/QueryScriptExecutionStatus'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedExecutionRequestDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseExecutionRequestForbidden'
    post:
      summary: Create a new execution request
      tags:
        - execution requests
      operationId: executionRequestsCreate
      security:
        - bearerAuth:
            - EXECUTION_REQUESTS_WRITE
      requestBody:
        description: The new Execution Request to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecutionRequestPostDto'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionRequestDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseExecutionRequestForbidden'
  '/execution-requests/{id}':
    get:
      summary: Fetch a specific execution request
      tags:
        - execution requests
      operationId: executionRequestsFetchById
      security:
        - bearerAuth:
            - EXECUTION_REQUESTS_READ
      parameters:
        - $ref: '#/components/parameters/PathExecutionRequestId'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionRequestDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseExecutionRequestForbidden'
        '404':
          description: Expected response to a non-existing execution request
    delete:
      summary: Delete a specific execution request
      tags:
        - execution requests
      operationId: executionRequestsDelete
      security:
        - bearerAuth:
            - EXECUTION_REQUESTS_WRITE
      parameters:
        - $ref: '#/components/parameters/PathExecutionRequestId'
      responses:
        '200':
          description: Expected response to a valid request
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseExecutionRequestForbidden'
        '404':
          description: Expected response to a non-existing execution request
  /script-executions:
    get:
      summary: Fetch all script executions
      tags:
        - script executions
      operationId: scriptExecutionsAll
      security:
        - bearerAuth:
            - SCRIPT_EXECUTIONS_READ
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddedScriptExecutionDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseScriptExecutionForbidden'
  '/script-executions/{runId}':
    get:
      summary: Fetch all processes from a specific runId of a script
      tags:
        - script executions
      operationId: scriptExecutionsFetchByRunId
      security:
        - bearerAuth:
            - SCRIPT_EXECUTIONS_READ
      parameters:
        - $ref: '#/components/parameters/PathScriptExecutionRunId'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddedScriptExecutionDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseScriptExecutionForbidden'
  '/script-executions/{runId}/{processId}':
    get:
      summary: Fetch a specific script execution and processId
      tags:
        - script executions
      operationId: scriptExecutionsFetchByRunIdAndProcessId
      security:
        - bearerAuth:
            - SCRIPT_EXECUTIONS_READ
      parameters:
        - $ref: '#/components/parameters/PathScriptExecutionRunId'
        - $ref: '#/components/parameters/PathScriptExecutionProcessId'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptExecutionDto'
        '401':
          $ref: '#/components/responses/TokenResponse'
        '403':
          $ref: '#/components/responses/ResponseScriptExecutionForbidden'
        '404':
          description: Expected response to a non-existing script execution
  /openapi/transform:
    post:
      summary: Transform an OpenAPI File into connections and components
      tags:
        - openapi
      operationId: openapiTransform
      requestBody:
        description: The openapi file to be transformed
        required: true
        content:
          application/json:
            schema:
              type: object
          multipart/formData:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  components:
                    type: array
                    items:
                      $ref: '#/components/schemas/ComponentDto'
                  connections:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConnectionDto'
        '400':
          description: Expected response to a wrong documentation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2021-02-09T07:57:01.062+0000'
                status: 400
                error: SwaggerParser exception
                message: The openapi title is missing
                path: /api/openapi/
  /datasets:
    get:
      summary: Fetch all datasets
      tags:
        - datasets
      operationId: datasetsFetchAll
      security:
        - bearerAuth:
            - DATASETS_READ
      parameters:
        - $ref: '#/components/parameters/QueryDatasetsUuid'
        - $ref: '#/components/parameters/QueryPaginationPage'
        - $ref: '#/components/parameters/QueryPaginationSize'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedDatasetDto'
    post:
      summary: Create a dataset
      tags:
        - datasets
      operationId: datasetsCreate
      security:
        - bearerAuth:
            - DATASETS_WRITE
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetPostDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDto'
        '400':
          description: bad request
  '/datasets/{uuid}':
    get:
      summary: fetch dataset with specified uuid
      tags:
        - datasets
      operationId: datasetsFetchById
      security:
        - bearerAuth:
            - DATASETS_READ
      parameters:
        - $ref: '#/components/parameters/PathDatasetsUuid'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDto'
        '404':
          description: no dataset found with specified uuid
    put:
      summary: update a dataset
      tags:
        - datasets
      operationId: datasetsUpdateByUuid
      security:
        - bearerAuth:
            - DATASETS_WRITE
      parameters:
        - $ref: '#/components/parameters/PathDatasetsUuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetPutDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDto'
        '400':
          description: bad request
        '404':
          description: specified dataset not found
    delete:
      summary: delete dataset with specified uuid
      tags:
        - datasets
      operationId: datasetsDeleteById
      security:
        - bearerAuth:
            - DATASETS_WRITE
      parameters:
        - $ref: '#/components/parameters/PathDatasetsUuid'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: no dataset found with specified uuid
  '/datasets/{uuid}/implementations':
    get:
      summary: fetch all implementation of a dataset with specified uuid
      tags:
        - datasets
      operationId: datasetsFetchImplementationsById
      security:
        - bearerAuth:
            - DATASETS_READ
      parameters:
        - $ref: '#/components/parameters/PathDatasetsUuid'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InMemoryDatasetImplementationDtoList'
        '404':
          description: no dataset found with specified uuid
  /users:
    get:
      summary: Fetch all users
      tags:
        - users
      operationId: usersFetchAll
      security:
        - bearerAuth:
            - USERS_READ
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDtoList'
  /users/create:
    post:
      summary: Create a user
      tags:
        - users
      operationId: usersCreate
      security:
        - bearerAuth:
            - USERS_WRITE
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPostDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: bad request
  /users/login:
    post:
      summary: Login a user
      tags:
        - users
      operationId: usersLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequestDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponseDto'
        '400':
          description: bad request
  '/users/{uuid}':
    get:
      summary: fetch user with specified uuid
      tags:
        - users
      operationId: usersFetchById
      security:
        - bearerAuth:
            - USERS_READ
      parameters:
        - $ref: '#/components/parameters/PathUsersUuid'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: no user found with specified uuid
  /teams:
    get:
      summary: Fetch all teams
      tags:
        - teams
      operationId: teamsFetchAll
      security:
        - bearerAuth:
            - TEAMS_READ
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDtoList'
    post:
      summary: Create a team
      tags:
        - teams
      operationId: teamsCreate
      security:
        - bearerAuth:
            - TEAMS_WRITE
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamPostDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'
        '400':
          description: bad request
  '/teams/{uuid}':
    get:
      summary: fetch team with sepcified uuid
      tags:
        - teams
      operationId: teamsFetchById
      security:
        - bearerAuth:
            - TEAMS_READ
      parameters:
        - $ref: '#/components/parameters/PathTeamsUuid'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'
        '404':
          description: no team found with specified uuid
    put:
      summary: update a team
      tags:
        - teams
      operationId: teamsUpdateByUuid
      security:
        - bearerAuth:
            - TEAMS_READ
      parameters:
        - $ref: '#/components/parameters/PathTeamsUuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamPutDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'
        '400':
          description: bad request
        '404':
          description: specified team not found
    delete:
      summary: delete team with specified uuid
      tags:
        - teams
      operationId: teamsDeleteById
      security:
        - bearerAuth:
            - TEAMS_WRITE
      parameters:
        - $ref: '#/components/parameters/PathTeamsUuid'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: no team found with specified uuid
  '/teams/{uuid}/roles':
    post:
      summary: Create a role for team
      tags:
        - teams
      operationId: teamsCreateRole
      security:
        - bearerAuth:
            - TEAMS_WRITE
      parameters:
        - $ref: '#/components/parameters/PathTeamsUuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolePostDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'
        '400':
          description: bad request
  '/teams/{uuid}/roles/{role-uuid}':
    delete:
      summary: delete a team's role
      tags:
        - teams
      operationId: teamsDeleteRole
      security:
        - bearerAuth:
            - TEAMS_WRITE
      parameters:
        - $ref: '#/components/parameters/PathTeamsUuid'
        - $ref: '#/components/parameters/PathTeamsRoleUuid'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: no team or role found with specified uuid
  '/teams/{uuid}/roles/{role-uuid}/users':
    post:
      summary: Add a user to a team's role
      tags:
        - teams
      operationId: teamsAddUserToRole
      security:
        - bearerAuth:
            - TEAMS_WRITE
            - ROLES_WRITE
      parameters:
        - $ref: '#/components/parameters/PathTeamsUuid'
        - $ref: '#/components/parameters/PathTeamsRoleUuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleUserPostDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleUserPostDto'
        '400':
          description: bad request
  '/teams/{uuid}/roles/{role-uuid}/users/{user-uuid}':
    delete:
      summary: Delete a user from a team's role
      tags:
        - teams
      operationId: teamsDeleteUserToRole
      security:
        - bearerAuth:
            - ROLES_WRITE
      parameters:
        - $ref: '#/components/parameters/PathTeamsUuid'
        - $ref: '#/components/parameters/PathTeamsRoleUuid'
        - $ref: '#/components/parameters/PathTeamsUserUuid'
      responses:
        '200':
          description: Expected response to a valid request
        '400':
          description: bad request
  /security-groups:
    get:
      summary: Fetch all security groups
      tags:
        - security_groups
      operationId: securityGroupsFetchAll
      security:
        - bearerAuth:
            - GROUPS_READ
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroupDtoList'
    post:
      summary: Create a security group
      tags:
        - security_groups
      operationId: securityGroupsCreate
      security:
        - bearerAuth:
            - GROUPS_WRITE
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupPostDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroupDto'
        '400':
          description: bad request
  '/security-groups/{uuid}':
    get:
      summary: fetch security group with sepcified uuid
      tags:
        - security_groups
      operationId: securityGroupsFetchById
      security:
        - bearerAuth:
            - GROUPS_READ
      parameters:
        - $ref: '#/components/parameters/PathSecurityGroupsUuid'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroupDto'
        '404':
          description: no team found with specified uuid
    put:
      summary: update a security group
      tags:
        - security_groups
      operationId: securityGRoupsUpdateByUuid
      security:
        - bearerAuth:
            - GROUPS_WRITE
      parameters:
        - $ref: '#/components/parameters/PathSecurityGroupsUuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupPutDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroupDto'
        '400':
          description: bad request
        '404':
          description: specified security group not found
    delete:
      summary: delete security group with specified uuid
      tags:
        - security_groups
      operationId: securityGroupsDeleteById
      security:
        - bearerAuth:
            - GROUPS_WRITE
      parameters:
        - $ref: '#/components/parameters/PathSecurityGroupsUuid'
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: no security group found with specified uuid
  '/security-groups/{uuid}/teams':
    post:
      summary: Add a team to the security group
      tags:
        - security_groups
      operationId: securityGroupsAddTeam
      security:
        - bearerAuth:
            - GROUPS_WRITE
      parameters:
        - $ref: '#/components/parameters/PathSecurityGroupsUuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupTeamPutDto'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroupDto'
        '404':
          description: no security group found with specified uuid
  '/security-groups/{uuid}/teams/{team-uuid}':
    delete:
      summary: delete a team from a security group
      tags:
        - security_groups
      operationId: securityGroupsDeleteTeam
      security:
        - bearerAuth:
            - GROUPS_WRITE
      parameters:
        - $ref: '#/components/parameters/PathSecurityGroupsUuid'
        - name: team-uuid
          description: uuid of the team
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Expected response to a valid request
        '404':
          description: no security group found with specified uuid
components:
  parameters:
    PathScriptsName:
      name: name
      description: name of the script
      in: path
      required: true
      schema:
        type: string
    PathScriptsVersion:
      name: version
      description: version of the script
      in: path
      required: true
      schema:
        type: integer
        format: int64
    QueryScriptsName:
      in: query
      name: name
      required: false
      schema:
        type: string
      description: allow for filtering based on script name. Only scripts containing the provided value in its script name will be returned
    QueryScriptsVersion:
      in: query
      name: version
      required: false
      schema:
        type: string
        enum:
          - latest
      description: allow for selection of only the latest version of all scripts when given the value 'latest'
    QueryScriptsLabel:
      in: query
      name: label
      required: false
      schema:
        type: string
      description: 'allow for filtering based on script label. Format: `label_key:label_value`. Only scripts having a label with name `label_name` having a value containing `label_value`'
    QueryScriptsSort:
      in: query
      name: sort
      required: false
      schema:
        type: array
        items:
          type: string
          items:
            enum:
              - name
      explode: false
      description: |
        See https://stackoverflow.com/questions/33018127/spring-data-rest-sort-by-multiple-properties for query parameter formatting. Sort the result set according to the provided keywords. The order of sorting follows the order of the list. By default sorting is applied in the ascending direction but this can be altered by explicitly providing the sorting direction:
         * `name[,desc|,asc]` - Sort by script name.
    QueryScriptIncludeInActive:
      in: query
      name: includeInactive
      required: false
      schema:
        type: string
        enum:
          - true
          - false
      description: inculde inactive script. By default it will return only Active Scripts. Pass includeInactive=true to get Active and Inactive Script.
    PathComponentName:
      name: name
      description: name of the component
      in: path
      required: true
      schema:
        type: string
    PathComponentVersion:
      name: version
      description: version of the component
      in: path
      required: true
      schema:
        type: integer
        format: int64
    PathConnectionName:
      name: name
      description: name of the connection
      in: path
      required: true
      schema:
        type: string
    PathEnvironmentName:
      name: name
      description: name of the environment
      in: path
      required: true
      schema:
        type: string
    PathExecutionRequestId:
      name: id
      description: id of the execution request
      in: path
      required: true
      schema:
        type: string
    QueryExecutionRequestEnvironment:
      in: query
      name: environment
      required: false
      schema:
        type: string
    QueryExecutionRequestLabel:
      in: query
      name: label
      required: false
      schema:
        type: string
    QueryExecutionRequestScript:
      in: query
      name: script
      required: false
      schema:
        type: string
    QueryExecutionRequestVersion:
      in: query
      name: version
      required: false
      schema:
        type: string
    QueryExecutionRequestRunId:
      in: query
      name: run-id
      required: false
      schema:
        type: string
    QueryScriptExecutionStatus:
      in: query
      name: run-status
      required: false
      schema:
        type: string
        enum:
          - RUNNING
          - SUCCESS
          - WARNING
          - ERROR
          - STOPPED
          - SKIPPED
    PathScriptExecutionProcessId:
      name: processId
      description: id of the process id
      in: path
      required: true
      schema:
        type: string
    PathScriptExecutionRunId:
      name: runId
      description: id of the run id
      in: path
      required: true
      schema:
        type: string
    QueryPaginationPage:
      in: query
      name: page
      required: false
      schema:
        type: number
        default: 1
      description: determines the page being returned
    QueryPaginationSize:
      in: query
      name: size
      required: false
      schema:
        type: number
        default: 20
      description: detemines how many scripts are included in a page
    PathDatasetsUuid:
      name: uuid
      description: uuid of the dataset
      in: path
      required: true
      schema:
        type: string
        format: uuid
    QueryDatasetsUuid:
      name: name
      in: query
      required: false
      schema:
        type: string
      description: allow for filtering based on dataset name. Only dataset containing the provided value in its name will be returned
    PathUsersUuid:
      name: uuid
      description: uuid of the user
      in: path
      required: true
      schema:
        type: string
        format: uuid
    PathTeamsUuid:
      name: uuid
      description: uuid of the team
      in: path
      required: true
      schema:
        type: string
        format: uuid
    PathTeamsRoleUuid:
      name: role-uuid
      description: uuid of the team"s role
      in: path
      required: true
      schema:
        type: string
        format: uuid
    PathTeamsUserUuid:
      name: user-uuid
      description: uuid of the user
      in: path
      required: true
      schema:
        type: string
        format: uuid
    PathSecurityGroupsUuid:
      name: uuid
      description: uuid of the security group
      in: path
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    ScriptDto:
      type: object
      properties:
        name:
          type: string
        securityGroupName:
          type: string
        description:
          type: string
        version:
          $ref: '#/components/schemas/ScriptVersionDto'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ScriptParameterDto'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/ActionDto'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/ScriptLabelDto'
        execution:
          type: object
          properties:
            total:
              type: number
            mostRecent:
              type: array
              items:
                type: object
                properties:
                  startTimestamp:
                    type: string
                  endTimestamp:
                    type: string
                  runStatus:
                    type: string
                  runId:
                    type: string
                  environment:
                    type: string
        scheduling:
          type: array
          items:
            type: object
            properties:
              environment:
                type: string
              frequency:
                type: number
        _links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/Link'
            scripts:
              $ref: '#/components/schemas/Link'
            AllVersionOfTheScript:
              $ref: '#/components/schemas/Link'
    ScriptVersionDto:
      type: object
      properties:
        number:
          type: integer
          format: int64
        description:
          type: string
        deletedAt:
          type: string
    ScriptParameterDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    ScriptLabelDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    ActionDto:
      type: object
      properties:
        number:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
        description:
          type: string
        component:
          type: string
        condition:
          type: string
        iteration:
          type: string
        errorExpected:
          type: boolean
        errorStop:
          type: boolean
        retries:
          type: integer
          format: int32
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ActionParameterDto'
    ActionParameterDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    PagedScriptDto:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            scripts:
              type: array
              items:
                $ref: '#/components/schemas/ScriptDto'
        _links:
          $ref: '#/components/schemas/PageLinks'
        page:
          $ref: '#/components/schemas/PaginationProperties'
    ComponentDto:
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        description:
          type: string
        version:
          $ref: '#/components/schemas/ComponentVersionDto'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ComponentParameterDto'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/ComponentAttributeDto'
    ComponentVersionDto:
      type: object
      properties:
        number:
          type: integer
          format: int64
        description:
          type: string
    ComponentParameterDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    ComponentAttributeDto:
      type: object
      properties:
        environment:
          type: string
        name:
          type: string
        value:
          type: string
    EmbeddedComponentDto:
      type: object
      properties:
        _embedded:
          type: array
          items:
            $ref: '#/components/schemas/ComponentDto'
    ConnectionDto:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        description:
          type: string
        environments:
          type: array
          items:
            type: object
            properties:
              environment:
                type: string
              parameters:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectionParameterDto'
    ConnectionParameterDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    EmbeddedConnectionDto:
      type: object
      properties:
        _embedded:
          type: array
          items:
            $ref: '#/components/schemas/ConnectionDto'
    componentTypeDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/componentTypeParameterDto'
    componentTypeParameterDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
        mandatory:
          type: boolean
          default: false
        encrypted:
          type: boolean
          default: false
    EnvironmentDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentParameterDto'
    EnvironmentParameterDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    EmbeddedEnvironmentDto:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            scripts:
              type: array
              items:
                $ref: '#/components/schemas/EnvironmentDto'
        page:
          $ref: '#/components/schemas/PaginationProperties'
    ExecutionRequestDto:
      type: object
      properties:
        executionRequestId:
          type: string
        requestTimestamp:
          type: string
          format: date-time
        name:
          type: string
        description:
          type: string
        scope:
          type: string
        context:
          type: string
        email:
          type: string
        executionRequestStatus:
          type: string
          enum:
            - NEW
            - SUBMITTED
            - ACCEPTED
            - DECLINED
            - STOPPED
            - COMPLETED
            - KILLED
            - UNKNOWN
        scriptExecutionRequests:
          type: array
          items:
            $ref: '#/components/schemas/ScriptExecutionRequestDto'
        executionRequestLabels:
          type: array
          items:
            $ref: '#/components/schemas/ExecutionRequestLabelDto'
    ExecutionRequestPostDto:
      type: object
      properties:
        requestTimestamp:
          type: string
        name:
          type: string
        description:
          type: string
        scope:
          type: string
        context:
          type: string
        email:
          type: string
        scriptExecutionRequests:
          type: array
          items:
            $ref: '#/components/schemas/ScriptExecutionRequestDto'
        executionRequestLabels:
          type: array
          items:
            $ref: '#/components/schemas/ExecutionRequestLabelDto'
    ExecutionRequestLabelDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    PagedExecutionRequestDto:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            execution_requests:
              type: array
              items:
                $ref: '#/components/schemas/ExecutionRequestDto'
        _links:
          $ref: '#/components/schemas/PageLinks'
        page:
          $ref: '#/components/schemas/PaginationProperties'
    ScriptExecutionRequestDto:
      type: object
      properties:
        scriptExecutionRequestId:
          type: string
        executionRequestId:
          type: string
        environment:
          type: string
        exit:
          type: boolean
        impersonations:
          type: array
          items:
            $ref: '#/components/schemas/ScriptExecutionRequestImpersonationDto'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ScriptExecutionRequestParameterDto'
        scriptExecutionRequestStatus:
          type: string
          enum:
            - NEW
            - SUBMITTED
            - ACCEPTED
            - DECLINED
            - COMPLETED
            - ABORTED
        scriptName:
          type: string
        scriptVersion:
          type: integer
          format: int64
        securityGroupName:
          type: string
        runId:
          type: string
        runStatus:
          type: string
          enum:
            - RUNNING
            - SUCCESS
            - WARNING
            - ERROR
            - STOPPED
            - SKIPPED
    ScriptexecutionRequestPostDto:
      type: object
      properties:
        environment:
          type: string
        exit:
          type: boolean
        impersonations:
          type: array
          items:
            $ref: '#/components/schemas/ScriptExecutionRequestImpersonationDto'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ScriptExecutionRequestParameterDto'
        scriptName:
          type: string
        scriptVersion:
          type: integer
          format: int64
    ScriptExecutionRequestImpersonationDto:
      type: object
      properties:
        name:
          type: string
    ScriptExecutionRequestParameterDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    ScriptExecutionDto:
      type: object
      properties:
        runId:
          type: string
        processId:
          type: integer
          format: int64
        parentProcessId:
          type: integer
          format: int64
        scriptId:
          type: string
        scriptName:
          type: string
        scriptVersion:
          type: integer
          format: int64
        securityGroupName:
          type: string
        environment:
          type: string
        status:
          type: string
          enum:
            - RUNNING
            - SUCCESS
            - WARNING
            - ERROR
            - STOPPED
            - SKIPPED
        startTimestamp:
          type: string
          format: date-time
        endTimestamp:
          type: string
          format: date-time
        inputParameters:
          type: array
          items:
            $ref: '#/components/schemas/ExecutionInputParameterDto'
        designLabels:
          type: array
          items:
            $ref: '#/components/schemas/ScriptLabelDto'
        executionLabels:
          type: array
          items:
            $ref: '#/components/schemas/ExecutionRequestLabelDto'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/ActionExecutionDto'
        output:
          type: array
          items:
            $ref: '#/components/schemas/OutputDto'
    EmbeddedScriptExecutionDto:
      type: object
      properties:
        _embedded:
          type: array
          items:
            $ref: '#/components/schemas/ScriptExecutionDto'
    ExecutionInputParameterDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    ActionExecutionDto:
      type: object
      properties:
        runId:
          type: string
        processId:
          type: integer
          format: int64
        type:
          type: string
        name:
          type: string
        description:
          type: string
        condition:
          type: string
        errorStop:
          type: boolean
        errorExpected:
          type: boolean
        status:
          type: string
          enum:
            - RUNNING
            - SUCCESS
            - WARNING
            - ERROR
            - STOPPED
            - SKIPPED
        startTimestamp:
          type: string
          format: date-time
        endTimestamp:
          type: string
          format: date-time
        inputParameters:
          type: array
          items:
            $ref: '#/components/schemas/ActionInputParametersDto'
        output:
          type: array
          items:
            $ref: '#/components/schemas/OutputDto'
    ActionInputParametersDto:
      type: object
      properties:
        name:
          type: string
        rawValue:
          type: string
        resolvedValue:
          type: string
    OutputDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    Link:
      type: object
      properties:
        href:
          type: string
    PageLinks:
      type: object
      properties:
        first:
          $ref: '#/components/schemas/Link'
        prev:
          $ref: '#/components/schemas/Link'
        self:
          $ref: '#/components/schemas/Link'
        next:
          $ref: '#/components/schemas/Link'
        last:
          $ref: '#/components/schemas/Link'
    PaginationProperties:
      type: object
      properties:
        size:
          type: integer
          description: Number of element displayed on the page
        totalElements:
          type: integer
          description: Number of element Avalaible in the API through this endpoint
        totalPages:
          type: integer
          description: Number of page with the parameter size and totalElements
        number:
          type: integer
          description: Actual Number of the page (starts from 1 to n)
    DatasetDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        implementations:
          type: array
          items:
            $ref: '#/components/schemas/InMemoryDatasetImplementationDto'
    DatasetImplementationLabelDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        label:
          type: string
    InMemoryDatasetImplementationDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - database
            - in-memory
        keyValues:
          type: array
          items:
            $ref: '#/components/schemas/InMemoryDatasetImplementationKeyValueDto'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/DatasetImplementationLabelDto'
    InMemoryDatasetImplementationDtoList:
      type: array
      items:
        $ref: '#/components/schemas/InMemoryDatasetImplementationDto'
    InMemoryDatasetImplementationKeyValueDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        key:
          type: string
        value:
          type: string
    PagedDatasetDto:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            datasets:
              type: array
              items:
                $ref: '#/components/schemas/DatasetDto'
        _links:
          $ref: '#/components/schemas/PageLinks'
        page:
          $ref: '#/components/schemas/PaginationProperties'
    DatasetPostDto:
      type: object
      properties:
        name:
          type: string
        implementations:
          type: array
          items:
            $ref: '#/components/schemas/InMemoryDatasetImplementationPostDto'
    DatasetImplementationLabelPostDto:
      type: object
      properties:
        label:
          type: string
    InMemoryDatasetImplementationPostDto:
      type: object
      properties:
        keyValues:
          type: array
          items:
            $ref: '#/components/schemas/InMemoryDatasetImplementationKeyValuePostDto'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/DatasetImplementationLabelPostDto'
        type:
          type: string
          enum:
            - database
            - in-memory
    InMemoryDatasetImplementationKeyValuePostDto:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    DatasetPutDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        implementations:
          type: array
          items:
            $ref: '#/components/schemas/InMemoryDatasetImplementationPostDto'
    UserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        enabled:
          type: boolean
        expired:
          type: boolean
        credentialsExpired:
          type: boolean
        locked:
          type: boolean
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRoleDto'
    UserPostDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    UserRoleDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        team:
          $ref: '#/components/schemas/UserRoleTeamDto'
        privileges:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeDto'
    UserRoleTeamDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    PagedUserDto:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/UserDto'
        _links:
          $ref: '#/components/schemas/PageLinks'
        page:
          $ref: '#/components/schemas/PaginationProperties'
    AuthenticationResponseDto:
      type: object
      properties:
        accessToken:
          type: string
        expiresIn:
          type: integer
    AuthenticationRequestDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    UserDtoList:
      type: array
      items:
        $ref: '#/components/schemas/UserDto'
    PrivilegeDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        privilege:
          type: string
    PrivilegePostDto:
      type: object
      properties:
        privilege:
          type: string
    TeamDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        teamName:
          type: string
        securityGroups:
          type: array
          items:
            $ref: '#/components/schemas/TeamSecurityGroupDto'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleDto'
    RoleDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/RoleUserDto'
        privileges:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegeDto'
    RolePostDto:
      type: object
      properties:
        name:
          type: string
        privileges:
          type: array
          items:
            $ref: '#/components/schemas/PrivilegePostDto'
    RoleUserPostDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
    TeamPostDto:
      type: object
      properties:
        teamName:
          type: string
    TeamPutDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        teamName:
          type: string
        securityGroups:
          type: array
          items:
            type: string
            format: uuid
        roles:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              name:
                type: string
              users:
                type: array
                items:
                  type: string
                  format: uuid
              privileges:
                type: array
                items:
                  $ref: '#/components/schemas/PrivilegeDto'
    TeamDtoList:
      type: array
      items:
        $ref: '#/components/schemas/TeamDto'
    PagedTeamDto:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            teams:
              type: array
              items:
                $ref: '#/components/schemas/TeamDto'
        _links:
          $ref: '#/components/schemas/PageLinks'
        page:
          $ref: '#/components/schemas/PaginationProperties'
    RoleUserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        enabled:
          type: boolean
        expired:
          type: boolean
        credentialsExpired:
          type: boolean
        locked:
          type: boolean
    TeamSecurityGroupDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    SecurityObjectDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        type:
          type: string
    SecurityObjectPutDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
    SecurityGroupDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        teams:
          type: array
          items:
            $ref: '#/components/schemas/SecurityGroupTeamDto'
        securityObjects:
          type: array
          items:
            $ref: '#/components/schemas/SecurityObjectDto'
    SecurityGroupPostDto:
      type: object
      properties:
        name:
          type: string
    SecurityGroupPutDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        teams:
          type: array
          items:
            $ref: '#/components/schemas/SecurityGroupTeamPutDto'
        securityObjects:
          type: array
          items:
            $ref: '#/components/schemas/SecurityObjectPutDto'
    SecurityGroupTeamDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        teamName:
          type: string
    SecurityGroupTeamPutDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
    SecurityGroupDtoList:
      type: array
      items:
        $ref: '#/components/schemas/SecurityGroupDto'
    Response:
      type: object
      properties:
        timestamp:
          type: string
        status:
          type: integer
        message:
          type: string
    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            error:
              type: string
            path:
              type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnexpectedError:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NullResponse:
      description: Null response
    TokenResponse:
      description: Expected response to a no/bad/expired token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            timestamp: 2021-02-15T12:01:01.107Z
            status: 401
            message: 'The token was expected to have 3 parts, but got 2.'
    ResponseComponentForbidden:
      description: Expected response to a forbidden request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            timestamp: '2021-02-09T07:57:01.062+0000'
            status: 403
            error: Forbidden
            message: Access denied
            path: /api/components/
    ResponseConnectionForbidden:
      description: Expected response to a forbidden request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            timestamp: '2021-02-09T07:57:01.062+0000'
            status: 403
            error: Forbidden
            message: Access denied
            path: /api/connections/
    ResponseComponentTypeForbidden:
      description: Expected response to a forbidden request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            timestamp: '2021-04-15T07:57:01.062+0000'
            status: 403
            error: Forbidden
            message: Access denied
            path: /api/component-types/
    ResponseEnvironmentForbidden:
      description: Expected response to a forbidden request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            timestamp: '2021-02-09T07:57:01.062+0000'
            status: 403
            error: Forbidden
            message: Access denied
            path: /api/environments/
    ResponseExecutionRequestForbidden:
      description: Expected response to a forbidden request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            timestamp: '2021-02-09T07:57:01.062+0000'
            status: 403
            error: Forbidden
            message: Access denied
            path: /api/execution-requests
    ResponseScriptExecutionForbidden:
      description: Expected response to a forbidden request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            timestamp: '2021-02-09T07:57:01.062+0000'
            status: 403
            error: Forbidden
            message: Access denied
            path: /api/script-executions
